import sklearn.metrics
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import torch

def calc_accuracy(confusion_matrix):
    return (confusion_matrix[0][0] + confusion_matrix[-1][-1])/np.sum(confusion_matrix)

def calc_confusion_matrix(validation_set, device, network):
    confusion_matrix = torch.zeros(2, 2)
    with torch.no_grad():
     for i, data in enumerate(validation_set, 0):
         images, labels = data
         images = images.to(device)
         labels = labels.to(device)
         outputs = network(images)
         _, preds = torch.max(outputs, 1)
         for t, p in zip(labels.view(-1), preds.view(-1)):
                 confusion_matrix[t.long(), p.long()] += 1

    cm = confusion_matrix.numpy()
    cm = cm / cm.sum(axis=1)

        

    classes = ("bengin", "malware")

    fig = plt.figure(figsize=(10, 7))
    heatmap = sns.heatmap( cm, annot=True, cmap="gray" , xticklabels = classes, yticklabels=classes)

    plt.ylabel("True Label")
    plt.xlabel("Predicted Label")

    plt.savefig()