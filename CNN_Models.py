import torch.nn as nn
import torch.nn.functional as F

class MalCnnOne(nn.Module):
    CNN_name = "Model One"
    def __init__(self, dropout, image_size):
        super(MalCnnOne, self).__init__()
        self.dropout=dropout
        self.image_size=image_size
        #Convolutions
        self.conv1 = nn.Conv2d(1, 16, 3, padding=1)
        self.conv2 = nn.Conv2d(16, 32, 3, padding=1)
        self.conv3 = nn.Conv2d(32, 64, 3, padding=1)

        #Pooling layer
        self.pool = nn.MaxPool2d(2, 2)
        
        #Fully connected layers
        self.fc1 = nn.Linear(self.image_size*self.image_size,512)
        self.fc2 = nn.Linear(512, 256)
        self.fc3 = nn.Linear(256, 2)
        
        self.dropout = nn.Dropout(self.dropout)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = self.pool(F.relu(self.conv3(x)))
        x = x.view(-1,self.image_size*self.image_size)
        
        x = self.dropout(F.relu(self.fc1(x)))

        x=self.dropout(F.relu(self.fc2(x)))

        x = F.log_softmax(self.fc3(x),dim=1)

        return x

class MalCnnTwo(nn.Module):
    CNN_name = "Model Two"
    def __init__(self, dropout, image_size):
        super(MalCnnTwo, self).__init__()
        self.dropout=dropout
        self.image_size=image_size
        #Convolutions
        self.conv1 = nn.Conv2d(1, 16, 3, padding=1)
        self.conv2 = nn.Conv2d(16, 32, 3, padding=1)
        self.conv3 = nn.Conv2d(32, 64, 3, padding=1)
        self.conv4 = nn.Conv2d(64, 128, 3, padding=1)
        self.conv5 = nn.Conv2d(128, 256, 3, padding=1)

        #Pooling layer
        self.pool = nn.MaxPool2d(2, 2)
        
        #Fully connected layers
        self.fc1 = nn.Linear(self.image_size*self.image_size,1024)
        self.fc2 = nn.Linear(1024, 1024)
        self.fc3 = nn.Linear(1024, 512)
        self.fc4 = nn.Linear(512, 2)
        
        self.dropout = nn.Dropout(self.dropout)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = self.pool(F.relu(self.conv3(x)))
        x = self.pool(F.relu(self.conv4(x)))
        x = self.pool(F.relu(self.conv5(x)))
        x = x.view(-1,self.image_size*self.image_size)
        
        x = self.dropout(F.relu(self.fc1(x)))
        x = self.dropout(F.relu(self.fc2(x)))
        x = self.dropout(F.relu(self.fc3(x)))

        x = F.log_softmax(self.fc4(x),dim=1)

        return x