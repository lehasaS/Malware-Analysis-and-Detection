import torch
import torch.nn as nn
import torch.nn.functional as F

class MalCnnOne(nn.Module):
    CNN_name = "Model One"
    def __init__(self, dropout=0.5, image_size=256):
        super(MalCnnOne, self).__init__()
        self.dropout=dropout
        self.image_size=image_size
        #Convolutions
        self.conv1 = nn.Conv2d(1, 16, 3, padding=1)
        self.norm1 = nn.BatchNorm2d(16)
        self.conv2 = nn.Conv2d(16, 32, 3, padding=1)
        self.norm2 = nn.BatchNorm2d(32)
        self.conv3 = nn.Conv2d(32, 64, 3, padding=1)
        self.norm3 = nn.BatchNorm2d(64)

        #Pooling layer
        self.pool = nn.MaxPool2d(2, 2)
        
        #Fully connected layers
        self.fc1 = nn.Linear(self.image_size*self.image_size,512)
        self.norm4 = nn.BatchNorm1d(512)
        self.fc2 = nn.Linear(512, 256)
        self.norm5 = nn.BatchNorm1d(256)
        self.fc3 = nn.Linear(256, 2)

        #flattener
        self.flattening = torch.nn.Flatten()
        
        #Dropout
        self.dropout = nn.Dropout(self.dropout)

    def forward(self, x):
        x = self.pool(F.relu(self.norm1(self.conv1(x))))
        x = self.pool(F.relu(self.norm2(self.conv2(x))))
        x = self.pool(F.relu(self.norm3(self.conv3(x))))
        
        x = self.flattening(x)

        x = self.dropout(F.relu(self.norm4(self.fc1(x))))
        x = self.dropout(F.relu(self.norm5(self.fc2(x))))

        x = F.log_softmax(self.fc3(x),dim=1)

        return x

class MalCnnTwo(nn.Module):
    CNN_name = "Model Two"
    def __init__(self, dropout=0.5, image_dim=64):
        super(MalCnnTwo, self).__init__()
        self.dropout=dropout
        self.image_dim=image_dim
        #Convolutions
        self.conv1 = nn.Conv2d(1, 16, 3, padding=1)
        self.norm1 = nn.BatchNorm2d(16)
        self.conv2 = nn.Conv2d(16, 32, 3, padding=1)
        self.norm2 = nn.BatchNorm2d(32)
        self.conv3 = nn.Conv2d(32, 64, 3, padding=1)
        self.norm3 = nn.BatchNorm2d(64)
        self.conv4 = nn.Conv2d(64, 128, 3, padding=1)
        self.norm4 = nn.BatchNorm2d(128)
        self.conv5 = nn.Conv2d(128, 256, 3, padding=1)
        self.norm5 = nn.BatchNorm2d(256)

        #Pooling layer
        self.pool = nn.MaxPool2d(2, 2)
        
        #Fully connected layers
        self.temp = int((self.image_dim*self.image_dim)/4)
        self.fc1 = nn.Linear(self.temp,1024)
        self.norm6 = nn.BatchNorm1d(1024)
        self.fc2 = nn.Linear(1024, 512)
        self.norm7 = nn.BatchNorm1d(512)
        self.fc3 = nn.Linear(512, 256)
        self.norm8 = nn.BatchNorm1d(256)
        self.fc4 = nn.Linear(256, 2)
        
        #Flattening
        self.flattener = torch.nn.Flatten()

        #Dropout
        self.dropout = nn.Dropout(self.dropout)

    def forward(self, x):
        x = self.pool(F.relu(self.norm1(self.conv1(x))))
        x = self.pool(F.relu(self.norm2(self.conv2(x))))
        x = self.pool(F.relu(self.norm3(self.conv3(x))))
        x = self.pool(F.relu(self.norm4(self.conv4(x))))
        x = self.pool(F.relu(self.norm5(self.conv5(x))))

        x=self.flattener(x)

        x = self.dropout(F.relu(self.norm6(self.fc1(x))))
        x = self.dropout(F.relu(self.norm7(self.fc2(x))))
        x = self.dropout(F.relu(self.norm8(self.fc3(x))))


        x = F.log_softmax(self.fc4(x),dim=1)

        return x
